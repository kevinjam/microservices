REQUEST
-------
{"transactionId":"MADAPI_20221109064346_d04c1","countryCode":"NGA","channel":"MADAPI","request":{"customerId":"2349062059246","description":"sample-description","binaryAttachment":[{"id":"string","attachmentType":"OTHERDOCS","content":"","mimeType":null,"name":"obama_index.jpg","description":"NIMCCUSTOMERPORTRAITRETRIEVED"},{"id":"id2","attachmentType":"OTHERDOCS","content":"","mimeType":null,"name":"obama_index1.jpg","description":"NIMCCUSTOMERPORTRAITRETRIEVED"},{"id":"id3","attachmentType":"OTHERDOCS","content":"","mimeType":null,"name":"obama_index3.jpg","description":"NIMCCUSTOMERPORTRAITRETRIEVED"},{"id":"id6","attachmentType":"OTHERDOCS","content":"","mimeType":null,"name":"obama_index6.jpg","description":"NIMCCUSTOMERPORTRAITRETRIEVED"}],"approvalRequired":true},"fetchDocumentRequest":null}}


response
--------

<ns0:GenericResponse
    xmlns:ns0=\"http://www.oracle.com/UCM\">
    <ns0:Service IdcService=\"CHECKIN_NEW\">
        <ns0:Document>
            <ns0:Field name=\"dDocOwner\">madapi_user</ns0:Field>
            <ns0:Field name=\"xPdfwTemplateType\"/>
            <ns0:Field name=\"xSUBMISSION_DATE\">11/09/22 07:43 AM</ns0:Field>
            <ns0:Field name=\"xAnnotationDetails:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"localizedForResponse\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_ID1\">0</ns0:Field>
            <ns0:Field name=\"dActionDate\">11/9/22 7:43 AM</ns0:Field>
            <ns0:Field name=\"xRECORD_STATUS:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"dpTriggerField\">xIdcProfile</ns0:Field>
            <ns0:Field name=\"xCHANNEL\">MADAPI</ns0:Field>
            <ns0:Field name=\"xLEFT_FINGER_IMG_REASON\"/>
            <ns0:Field name=\"dClbraName\"/>
            <ns0:Field name=\"xCUSTOMER_PHOTO_TYPE\">NIMCCUSTOMERPORTRAITRETRIEVED</ns0:Field>
            <ns0:Field name=\"xRIGHT_THUMB_IMG_REASON\"/>
            <ns0:Field name=\"isCheckin\">1</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_PHOTO_TYPE:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_MSISDN\">2349062059246</ns0:Field>
            <ns0:Field name=\"xWCWorkflowApproverUserList:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dSecurityGroup:rule\">IpmSystemFields_Restricted</ns0:Field>
            <ns0:Field name=\"dWebExtension\">jpg</ns0:Field>
            <ns0:Field name=\"xCpdIsLocked:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"scriptableActionType\">3</ns0:Field>
            <ns0:Field name=\"xREG_DATE:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"LockedContents1\">dDocName:WCC_Cluster-9146143</ns0:Field>
            <ns0:Field name=\"dDocType:rule\">IpmSystemFields_Restricted</ns0:Field>
            <ns0:Field name=\"xStorageRule\">testStorageRule</ns0:Field>
            <ns0:Field name=\"isEditMode\">1</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_MSISDN:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"IdcService\">CHECKIN_NEW</ns0:Field>
            <ns0:Field name=\"scriptableActionFlags\">12</ns0:Field>
            <ns0:Field name=\"dOutDate\"/>
            <ns0:Field name=\"xRIGHT_THUMB_IMG_REASON:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dRevClassID\">9146143</ns0:Field>
            <ns0:Field name=\"computePermissions\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_SEQ:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"dAction\">Checkin</ns0:Field>
            <ns0:Field name=\"idcToken\"/>
            <ns0:Field name=\"xDOCUMENT_NAME\">obama_index6.jpg</ns0:Field>
            <ns0:Field name=\"xWCTags\"/>
            <ns0:Field name=\"xBIOMETRIC_TYPE\">OTHERDOCS</ns0:Field>
            <ns0:Field name=\"dDocCreator\">madapi_user</ns0:Field>
            <ns0:Field name=\"dDocLastModifier\">madapi_user</ns0:Field>
            <ns0:Field name=\"xWCWorkflowAssignment:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xClbraAliasList:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_SEQ\"/>
            <ns0:Field name=\"xIPMSYS_PARENT_ID\">0</ns0:Field>
            <ns0:Field name=\"dStatus\">RELEASED</ns0:Field>
            <ns0:Field name=\"webViewableFile:path\">/u01/oracle/runtime/QABio/cluster_QAwcc/cs/vault/~temp/558880983.jpg</ns0:Field>
            <ns0:Field name=\"dInDate\">11/9/22 7:43 AM</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_ID1:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_ADDITIONAL_MSISDN\"/>
            <ns0:Field name=\"xIdcProfile:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_ID\">2349062059246</ns0:Field>
            <ns0:Field name=\"scriptableActionErr\"/>
            <ns0:Field name=\"xCpdIsTemplateEnabled\">0</ns0:Field>
            <ns0:Field name=\"xPartitionId\"/>
            <ns0:Field name=\"dReleaseState\">Y</ns0:Field>
            <ns0:Field name=\"xTemplateType\"/>
            <ns0:Field name=\"xLEFT_FINGER_IMG_REASON:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"addReleasedWebFile\">1</ns0:Field>
            <ns0:Field name=\"UseForwardOnlyCursor\"/>
            <ns0:Field name=\"xCpdIsLocked\">0</ns0:Field>
            <ns0:Field name=\"dConversion\">PassThru</ns0:Field>
            <ns0:Field name=\"fParentGUID\">DF8F127A55B4E02E1BD66AF7773EEAA7</ns0:Field>
            <ns0:Field name=\"xWCTags:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xRIGHT_FINGER_IMG_REASON:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"doRenameWhenPossible\">FALSE</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_ADDITIONAL_MSISDN:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"scriptableActionFunction\">doSubService</ns0:Field>
            <ns0:Field name=\"xWCWorkflowAssignment\"/>
            <ns0:Field name=\"dDocLastModifiedDate\">11/9/22 7:43 AM</ns0:Field>
            <ns0:Field name=\"xExternalDataSet:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xPdfwTemplateType:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xRECORD_STATUS:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dPublishState\"/>
            <ns0:Field name=\"dID\">9145175</ns0:Field>
            <ns0:Field name=\"xLibraryGUID\"/>
            <ns0:Field name=\"dpEvent\">OnSubmit</ns0:Field>
            <ns0:Field name=\"xBASE64\">Base 64 Value</ns0:Field>
            <ns0:Field name=\"refreshSubMonikers\"/>
            <ns0:Field name=\"xIPMSYS_SCKEY\"/>
            <ns0:Field name=\"xRIGHT_FINGER_IMG_REASON\"/>
            <ns0:Field name=\"xIsACLReadOnlyOnUI\">0</ns0:Field>
            <ns0:Field name=\"xWCPageId\"/>
            <ns0:Field name=\"xIPMSYS_PARENT_ID:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"xComments\"/>
            <ns0:Field name=\"xLEFT_THUMB_IMG_REASON\"/>
            <ns0:Field name=\"xClbraUserList:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"StatusCode\">0</ns0:Field>
            <ns0:Field name=\"xLibraryGUID:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"doSorting\">0</ns0:Field>
            <ns0:Field name=\"xClbraRoleList\"/>
            <ns0:Field name=\"xIPMSYS_APP_ID:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"isInfoOnly\"/>
            <ns0:Field name=\"dRawDocID\">4879953</ns0:Field>
            <ns0:Field name=\"xCUSTOMER_ID:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"primaryFile:path\">/u01/oracle/runtime/QABio/cluster_QAwcc/cs/vault/~temp/558880983.jpg</ns0:Field>
            <ns0:Field name=\"xFINGERPRINT_NUMBER\"/>
            <ns0:Field name=\"dDocTitle\">obama_index6.jpg</ns0:Field>
            <ns0:Field name=\"dFileSize\">41217</ns0:Field>
            <ns0:Field name=\"StatusMessageKey\">!csServiceStatusMessage_checkin,WCC_CLUSTER-9146143</ns0:Field>
            <ns0:Field name=\"xUPDATE_DATE:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xFINGERPRINT_NUMBER:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xIPMSYS_PARENT_ID:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dpAction\">CheckinNew</ns0:Field>
            <ns0:Field name=\"scriptableActionParams\">CHECKIN_NEW_SUB</ns0:Field>
            <ns0:Field name=\"dActionMillis\">310547530</ns0:Field>
            <ns0:Field name=\"dIsPrimary\">1</ns0:Field>
            <ns0:Field name=\"dExtension\">jpg</ns0:Field>
            <ns0:Field name=\"xIPMSYS_SCKEY:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dProcessingState\">Y</ns0:Field>
            <ns0:Field name=\"dWorkflowState\"/>
            <ns0:Field name=\"changedMonikers\"/>
            <ns0:Field name=\"isDocProfileUsed\">true</ns0:Field>
            <ns0:Field name=\"xIPMSYS_STATUS:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"xPdfwTemplateID\"/>
            <ns0:Field name=\"dDocType\">Document</ns0:Field>
            <ns0:Field name=\"xIPMSYS_REDACTION\">0</ns0:Field>
            <ns0:Field name=\"xIPMSYS_REDACTION:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"dDocCreatedDate\">11/9/22 7:43 AM</ns0:Field>
            <ns0:Field name=\"xSUBMISSION_DATE:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"IsQueryObjectPersistent\"/>
            <ns0:Field name=\"xPIN_REF:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xCHANNEL_REF_ID:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xWebFlag:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xPIN_REF\"/>
            <ns0:Field name=\"xBASE64:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xIsACLReadOnlyOnUI:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xTemplateType:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_SEQ:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"RedirectParams\">IdcService=CHECKIN_CONFIRM_FORM&amp;dID=&lt;$dID$&gt;&amp;dDocTitle=&lt;$url(dDocTitle)$&gt;&amp;dDocName=&lt;$url(dDocName)$&gt;&amp;dDocAuthor=&lt;$url(dDocAuthor)$&gt;</ns0:Field>
            <ns0:Field name=\"refreshMonikers\"/>
            <ns0:Field name=\"xPartitionId:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dDocName\">WCC_CLUSTER-9146143</ns0:Field>
            <ns0:Field name=\"xIdcProfile\"/>
            <ns0:Field name=\"xIPMSYS_REDACTION:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dDocAuthor\">madapi_user</ns0:Field>
            <ns0:Field name=\"xCHANNEL_REF_ID\">MADAPI_20221109064346_d04c1</ns0:Field>
            <ns0:Field name=\"dIsWebFormat\">0</ns0:Field>
            <ns0:Field name=\"xWCPageId:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xPdfwTemplateID:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xRECORD_STATUS\"/>
            <ns0:Field name=\"xStorageRule:rule\">RecordStatusStorageRule</ns0:Field>
            <ns0:Field name=\"xUPDATE_DATE\"/>
            <ns0:Field name=\"xClbraRoleList:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xFINGERPRINT_NUMBER:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dPublishType\"/>
            <ns0:Field name=\"xComments:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xClbraUserList\"/>
            <ns0:Field name=\"dFormat\">image/jpeg</ns0:Field>
            <ns0:Field name=\"xStorageRule:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"RevisionSelectionMethod\">LatestNonDeleted</ns0:Field>
            <ns0:Field name=\"xREG_DATE\"/>
            <ns0:Field name=\"xParentFolders:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"xCHANNEL:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xCpdIsTemplateEnabled:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dRevRank\">0</ns0:Field>
            <ns0:Field name=\"dDocID\">4879954</ns0:Field>
            <ns0:Field name=\"xClbraAliasList\"/>
            <ns0:Field name=\"xParentFolders\"/>
            <ns0:Field name=\"dLocation\"/>
            <ns0:Field name=\"xLEFT_THUMB_IMG_REASON:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"primaryFile\">C: estingobama_index.jpg</ns0:Field>
            <ns0:Field name=\"xIPMSYS_BATCH_ID1:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"xIPMSYS_APP_ID\"/>
            <ns0:Field name=\"fApplication\">framework</ns0:Field>
            <ns0:Field name=\"xIPMSYS_SCKEY:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"xIPMSYS_STATUS\"/>
            <ns0:Field name=\"StorageRule\">testStorageRule</ns0:Field>
            <ns0:Field name=\"xWebFlag\"/>
            <ns0:Field name=\"dUser\">madapi_user</ns0:Field>
            <ns0:Field name=\"dOriginalName\">C: estingobama_index.jpg</ns0:Field>
            <ns0:Field name=\"xWCWorkflowApproverUserList\"/>
            <ns0:Field name=\"doFileCopy\">True</ns0:Field>
            <ns0:Field name=\"isNew\">1</ns0:Field>
            <ns0:Field name=\"xAnnotationDetails\">0</ns0:Field>
            <ns0:Field name=\"dSecurityGroup\">Biometric</ns0:Field>
            <ns0:Field name=\"StatusMessage\">Successfully checked in content item 'WCC_CLUSTER-9146143'.</ns0:Field>
            <ns0:Field name=\"dFlag1\"/>
            <ns0:Field name=\"dCreateDate\">11/9/22 7:43 AM</ns0:Field>
            <ns0:Field name=\"xBIOMETRIC_TYPE:rule\">UCM_Fields_Hide</ns0:Field>
            <ns0:Field name=\"xExternalDataSet\"/>
            <ns0:Field name=\"dRevisionID\">1</ns0:Field>
            <ns0:Field name=\"isDocProfileDone\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_STATUS:isSetDefault\">1</ns0:Field>
            <ns0:Field name=\"dRevLabel\">1</ns0:Field>
            <ns0:Field name=\"xIPMSYS_APP_ID:rule\">IpmSystemFields_Hide</ns0:Field>
            <ns0:Field name=\"DirectReleaseNewCheckinDoc\">true</ns0:Field>
            <ns0:Field name=\"dDocAccount\">biometric</ns0:Field>
            <ns0:ResultSet name=\"UserAttribInfo\">
                <ns0:Row>
                    <ns0:Field name=\"dUserName\">madapi_user</ns0:Field>
                    <ns0:Field name=\"AttributeInfo\">account,biometric,7,account,#none,15,role,Biometric_Admin,15,role,Biometric_RW,15,role,Biometric_R,15,role,Biometric_RWD,15,role,guest,15,role,authenticated,15</ns0:Field>
                </ns0:Row>
            </ns0:ResultSet>
        </ns0:Document>
    </ns0:Service>
</ns0:GenericResponse>